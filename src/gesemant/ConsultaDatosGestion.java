/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gesemant;

import java.awt.Color;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.WindowConstants;
import model.DB;

/**
 *
 * @author admin
 */
public class ConsultaDatosGestion extends javax.swing.JFrame {

    /**
     * Creates new form ConsultaDatosGestion
     */
    DB datos;
    private ArrayList<IndicadorSemana> listIndicadorSemana = new ArrayList<IndicadorSemana>();    
    private ArrayList<MostrarGraficasIndicadores> listMostrarGraficasIndicadores = new ArrayList<MostrarGraficasIndicadores>();
    private int indicadorSemanaNumber = 0;
    private ArrayList<String> semanas = new ArrayList<String>();
    private ArrayList mantpredictivo = new ArrayList(); 
    private ArrayList mantpreventivo = new ArrayList(); 
    private ArrayList mantcorrectivopr = new ArrayList(); 
    private ArrayList mantcorrectivoem = new ArrayList();
    private ArrayList ordenestrabajo = new ArrayList(); 
    private ArrayList horashombretrabajo = new ArrayList();
    private ArrayList horasnormales = new ArrayList(); 
    private ArrayList horasextras = new ArrayList();
    private ArrayList variacionn = new ArrayList();
    private ArrayList utilmanoobra = new ArrayList(); 
    private ArrayList tiempnoiden = new ArrayList();
    private ArrayList retrabajoo = new ArrayList(); 
    private ArrayList backlogg = new ArrayList();

    public ConsultaDatosGestion() {
        initComponents();
        this.setTitle("CONSULTA DE GESTIÃ“N SEMANAL");
        this.setDefaultCloseOperation(WindowConstants.HIDE_ON_CLOSE);
        this.setLocationRelativeTo(null);
        setIconImage(Toolkit.getDefaultToolkit().getImage(this.getClass().getResource("/imagenes/logo-trans-small.png")));
        
        consultar.setBackground(Color.decode("#3e8f3e"));
        consultar.setForeground(Color.white);
        cancelar.setBackground(Color.decode("#ee4444"));
        cancelar.setForeground(Color.white);
        
        Date date = new Date();
        
        desde.setFormats("dd/MM/yyyy");
        desde.setDate(date);
        hasta.setFormats("dd/MM/yyyy");
        hasta.setDate(date);
        
        datos = DB.getInstance();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        desde = new org.jdesktop.swingx.JXDatePicker();
        jLabel2 = new javax.swing.JLabel();
        hasta = new org.jdesktop.swingx.JXDatePicker();
        consultar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setText("Desde:");

        jLabel2.setText("Hasta:");

        consultar.setText("VER INDICADORES");
        consultar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                consultarActionPerformed(evt);
            }
        });

        cancelar.setText("CANCELAR");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(84, 84, 84)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hasta, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE)
                    .addComponent(desde, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(120, 120, 120))
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addComponent(consultar)
                .addGap(18, 18, 18)
                .addComponent(cancelar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(desde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hasta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(consultar)
                    .addComponent(cancelar))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void consultarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_consultarActionPerformed
        // TODO add your handling code here:
        
        // verificando indicadores y cerrar ventana
        if(indicadorSemanaNumber > 0){
            listMostrarGraficasIndicadores.forEach((a)->a.dispose());
        }
        
        this.indicadorSemanaNumber = 0;
        String fecha_inicial = "", fecha_final = "";
        String DATE_FORMAT = "yyyyMMdd";
        SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
        String DATE_FORMAT_VIEW = "yyyy/MM/dd";
        SimpleDateFormat sdfView = new SimpleDateFormat(DATE_FORMAT_VIEW);
        
        ResultSet res = datos.searchDatosGestionDesdeHasta(sdf.format(desde.getDate()), sdf.format(hasta.getDate()));
        
        // REINICIANDO ARRAYLIST 
        semanas = new ArrayList<String>();
        mantpredictivo = new ArrayList();
        mantpreventivo = new ArrayList(); 
        mantcorrectivopr = new ArrayList(); 
        mantcorrectivoem = new ArrayList(); 
        ordenestrabajo = new ArrayList(); 
        horashombretrabajo = new ArrayList(); 
        horasnormales = new ArrayList(); 
        horasextras = new ArrayList(); 
        variacionn = new ArrayList(); 
        utilmanoobra = new ArrayList(); 
        tiempnoiden = new ArrayList(); 
        retrabajoo = new ArrayList(); 
        backlogg = new ArrayList();
        
        try {
            while(res.next()){
                // aumentando numero de indicadores
                indicadorSemanaNumber++;
                // *********** OBTENIENDO DATOS EN LA BASE DE DATOS ***********************
                String fecha_inicio = res.getString(4);
                String fecha_fin = res.getString(5);
                String num_semana = res.getString(6);
                
                String trpr_predictivo_orden = res.getString(21);
                String trpr_preventivo_orden = res.getString(22);
                String trpr_correctivopr_orden = res.getString(23);
                String trpr_correctivoem_orden = res.getString(24);
                int prTotalOrden = Integer.parseInt(res.getString(21))+Integer.parseInt(res.getString(22))+Integer.parseInt(res.getString(23))+Integer.parseInt(res.getString(24));
                    
                String trpr_predictivo_horas = res.getString(25);
                String trpr_preventivo_horas = res.getString(26);
                String trpr_correctivopr_horas = res.getString(27);
                String trpr_correctivoem_horas = res.getString(28);
                int prTotalHoras = Integer.parseInt(res.getString(25))+Integer.parseInt(res.getString(26))+Integer.parseInt(res.getString(27))+Integer.parseInt(res.getString(28));
                     
                String trre_predictivo_orden = res.getString(29);
                String trre_preventivo_orden = res.getString(30);
                String trre_correctivopr_orden = res.getString(31);
                String trre_correctivoem_orden = res.getString(32);
                int reTotalOrden = Integer.parseInt(res.getString(29))+Integer.parseInt(res.getString(30))+Integer.parseInt(res.getString(31))+Integer.parseInt(res.getString(32));
                    
                String trre_predictivo_horas = res.getString(33);
                String trre_preventivo_horas = res.getString(34);
                String trre_correctivopr_horas = res.getString(35);
                String trre_correctivoem_horas = res.getString(36);
                int reTotalHoras = Integer.parseInt(res.getString(33))+Integer.parseInt(res.getString(34))+Integer.parseInt(res.getString(35))+Integer.parseInt(res.getString(36));   
                
                String trej_predictivo_orden = res.getString(37);
                String trej_preventivo_orden = res.getString(38);
                String trej_correctivopr_orden = res.getString(39);
                String trej_correctivoem_orden = res.getString(40);
                int rejTotalOrden = Integer.parseInt(res.getString(37))+Integer.parseInt(res.getString(38))+Integer.parseInt(res.getString(39))+Integer.parseInt(res.getString(40));  
                
                String trej_predictivo_horas = res.getString(41);
                String trej_preventivo_horas = res.getString(42);
                String trej_correctivopr_horas = res.getString(43);
                String trej_correctivoem_horas = res.getString(44);
                int rejTotalHoras = Integer.parseInt(res.getString(41))+Integer.parseInt(res.getString(42))+Integer.parseInt(res.getString(43))+Integer.parseInt(res.getString(44)); 
                
                String trej_predictivo_horas_normales = res.getString(45);
                String trej_preventivo_horas_normales = res.getString(46);
                String trej_correctivopr_horas_normales = res.getString(47);
                String trej_correctivoem_horas_normales = res.getString(48);
                int rejTotalHorasNormales = Integer.parseInt(res.getString(45))+Integer.parseInt(res.getString(46))+Integer.parseInt(res.getString(47))+Integer.parseInt(res.getString(48));  
                
                String trej_predictivo_horas_extras = res.getString(49);
                String trej_preventivo_horas_extras = res.getString(50);
                String trej_correctivopr_horas_extras = res.getString(51);
                String trej_correctivoem_horas_extras = res.getString(52);
                int rejTotalHorasExtras = Integer.parseInt(res.getString(49))+Integer.parseInt(res.getString(50))+Integer.parseInt(res.getString(51))+Integer.parseInt(res.getString(52));  
                
                String trej_predictivo_total = res.getString(53);
                String trej_preventivo_total = res.getString(54);
                String trej_correctivopr_total = res.getString(55);
                String trej_correctivoem_total = res.getString(56);
                int rejTotalTotal = Integer.parseInt(res.getString(53))+Integer.parseInt(res.getString(54))+Integer.parseInt(res.getString(55))+Integer.parseInt(res.getString(56));   
                
                String trej_predictivo_ot = res.getString(57);
                String trej_preventivo_ot = res.getString(58);
                String trej_correctivopr_ot = res.getString(59);
                String trej_correctivoem_ot = res.getString(60);
                int rejTotalOt = Integer.parseInt(res.getString(57))+Integer.parseInt(res.getString(58))+Integer.parseInt(res.getString(59))+Integer.parseInt(res.getString(60));
                
                String trpen_predictivo_orden = res.getString(13);
                String trpen_preventivo_orden = res.getString(14);
                String trpen_correctivopr_orden = res.getString(15);
                String trpen_correctivoem_orden = res.getString(16);
                int penTotalOrden = Integer.parseInt(res.getString(13))+Integer.parseInt(res.getString(14))+Integer.parseInt(res.getString(15))+Integer.parseInt(res.getString(16));
                    
                String trpen_predictivo_horas = res.getString(17);
                String trpen_preventivo_horas = res.getString(18);
                String trpen_correctivopr_horas = res.getString(19);
                String trpen_correctivoem_horas = res.getString(20);
                int penTotalHoras = Integer.parseInt(res.getString(17))+Integer.parseInt(res.getString(18))+Integer.parseInt(res.getString(19))+Integer.parseInt(res.getString(20));
                
                // *********** FIN OBTENIENDO DATOS EN LA BASE DE DATOS ***********************

                
                // ************ RESULTADOS INDICADORES ******************
                
                // TIPO DE MANTENIMIENTO
                int mant_predictivo = (int) ((Math.round((Float.parseFloat(trej_predictivo_total) / rejTotalTotal) * 100d) / 100d) * 100);
                mantpredictivo.add(mant_predictivo);
                int mant_preventivo = (int) ((Math.round((Float.parseFloat(trej_preventivo_total) / rejTotalTotal) * 100d) / 100d) * 100);
                mantpreventivo.add(mant_preventivo);
                int mant_correctivopr = (int) ((Math.round((Float.parseFloat(trej_correctivopr_total) / rejTotalTotal) * 100d) / 100d) * 100);       
                mantcorrectivopr.add(mant_correctivopr);
                int mant_correctivoem = (int) ((Math.round((Float.parseFloat(trej_correctivoem_total) / rejTotalTotal) * 100d) / 100d) * 100);       
                mantcorrectivoem.add(mant_correctivoem);

                // CUMPLIMIENTO DE LA PROGRAMACIÃ“N
                int ordenes_trabajo = (int) ((Math.round((Float.parseFloat(""+rejTotalOrden) / prTotalOrden) * 100d) / 100d) * 100);
                ordenestrabajo.add(ordenes_trabajo);
                int horas_hombre_trabajo = (int) ((Math.round((Float.parseFloat(""+rejTotalHoras) / prTotalOrden) * 100d) / 100d) * 10);
                horashombretrabajo.add(horas_hombre_trabajo);
                
                // HORARIO DE TRABAJO
                int horas_normales = (int) ((Math.round((Float.parseFloat(""+rejTotalHorasNormales) / rejTotalTotal) * 100d) / 100d) * 100);
                horasnormales.add(horas_normales);
                int horas_extras = (int) ((Math.round((Float.parseFloat(""+rejTotalHorasExtras) / rejTotalTotal) * 100d) / 100d) * 100);
                horasextras.add(horas_extras);
               
                // DESVIACIÃ“N
                int variacion = (int) (((Math.round((Float.parseFloat(""+rejTotalTotal) / rejTotalHoras) * 100d) / 100d)-1) * 100);
                variacionn.add(variacion);
                // PRODUCTIVIDAD
                
                int util_mano_obra = (int) ((Math.round((Float.parseFloat(""+rejTotalHorasNormales) / Integer.parseInt(res.getString(12))) * 100d) / 100d) * 100);
                utilmanoobra.add(util_mano_obra);
                int tiemp_no_iden = 100 - util_mano_obra;
                tiempnoiden.add(tiemp_no_iden);
                
                // CALIDAD
                int retrabajo = (int) ((Math.round((Float.parseFloat(""+rejTotalOt) / ordenes_trabajo) * 100d) / 100d) * 100); 
                retrabajoo.add(retrabajo);
                
                // TRABAJOS PENDIENTES
                double backlog = Math.round((Float.parseFloat(""+penTotalHoras) / Integer.parseInt(res.getString(12))) * 100d) / 100d;
                backlogg.add(backlog);
                
                // ************ FIN RESULTADOS INDICADORES ******************
                fecha_inicial =  fecha_inicio.charAt(0)+""+fecha_inicio.charAt(1)+""+fecha_inicio.charAt(2)+""+fecha_inicio.charAt(3)+"/"+fecha_inicio.charAt(4)+""+fecha_inicio.charAt(5)+"/"+fecha_inicio.charAt(6)+""+fecha_inicio.charAt(7);
                fecha_final = fecha_fin.charAt(0)+""+fecha_fin.charAt(1)+""+fecha_fin.charAt(2)+""+fecha_fin.charAt(3)+"/"+fecha_fin.charAt(4)+""+fecha_fin.charAt(5)+"/"+fecha_fin.charAt(6)+""+fecha_fin.charAt(7);
                semanas.add(fecha_inicial+"-"+fecha_final);
                //IndicadorSemana indicador = new IndicadorSemana(fecha_inicial, fecha_final, mant_predictivo, mant_preventivo, mant_correctivopr, mant_correctivoem, ordenes_trabajo, horas_hombre_trabajo, horas_normales, horas_extras, variacion, util_mano_obra, tiemp_no_iden, retrabajo, backlog);
                //indicador.show();
                //listIndicadorSemana.add(indicador); 
            }
            
        }catch (Exception e) {  }
  
        // verificando si existen datos en la busqueda
        if(this.indicadorSemanaNumber == 0)
        {
            JOptionPane.showMessageDialog(null, "Disculpe! No existen registros en la busqueda realizada!!"); 
        }
        else
        {
            MostrarGraficasIndicadores mostrar = new MostrarGraficasIndicadores(sdfView.format(desde.getDate())+"-"+sdfView.format(hasta.getDate()) ,this.semanas, this.mantpredictivo, this.mantpreventivo, this.mantcorrectivopr, this.mantcorrectivoem, this.ordenestrabajo, this.horashombretrabajo, this.horasnormales, this.horasextras, this.variacionn, this.utilmanoobra, this.tiempnoiden, this.retrabajoo, this.backlogg);
            mostrar.show();
            listMostrarGraficasIndicadores.add(mostrar);
        }
    }//GEN-LAST:event_consultarActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        // TODO add your handling code here:
        // verificando indicadores y cerrar ventana
        if(indicadorSemanaNumber > 0){
            listMostrarGraficasIndicadores.forEach((a)->a.dispose());
        }
        
        this.indicadorSemanaNumber = 0;
        
        this.dispose();
    }//GEN-LAST:event_cancelarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ConsultaDatosGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ConsultaDatosGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ConsultaDatosGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ConsultaDatosGestion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ConsultaDatosGestion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton consultar;
    private org.jdesktop.swingx.JXDatePicker desde;
    private org.jdesktop.swingx.JXDatePicker hasta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
